# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-08-10 07:20
from __future__ import unicode_literals

import datetime

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'swappable': 'AUTH_USER_MODEL',
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Disciplina',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(blank=True, max_length=50, null=True, verbose_name='Descrição')),
            ],
            options={
                'verbose_name_plural': 'Disciplinas',
                'verbose_name': 'Disciplina',
            },
        ),
        migrations.CreateModel(
            name='Local',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.IntegerField()),
                ('longitude', models.IntegerField()),
                ('descricao', models.CharField(max_length=30, verbose_name='Descrição')),
            ],
            options={
                'verbose_name_plural': 'Locais',
                'verbose_name': 'Local',
            },
        ),
        migrations.CreateModel(
            name='Notificacao',
            fields=[
                ('datahora', models.DateTimeField(auto_now_add=True, primary_key=True, serialize=False, verbose_name='Data notificação')),
                ('descricao', models.CharField(max_length=255, verbose_name='Descrição')),
                ('titulo', models.CharField(max_length=45, verbose_name='Título')),
                ('id_local', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='notificacao.Local', verbose_name='Local')),
            ],
            options={
                'verbose_name_plural': 'Notificações',
                'verbose_name': 'Notificação',
            },
        ),
        migrations.CreateModel(
            name='Remetente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=50, verbose_name='Descrição')),
            ],
            options={
                'verbose_name_plural': 'Remetentes',
                'verbose_name': 'Remetente',
            },
        ),
        migrations.CreateModel(
            name='TipoFormacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=30, verbose_name='Descrição')),
            ],
            options={
                'verbose_name_plural': 'Tipos Formações',
                'verbose_name': 'Tipo Formação',
            },
        ),
        migrations.CreateModel(
            name='TipoNotificacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=20, verbose_name='Título')),
                ('cor', models.CharField(max_length=7)),
            ],
            options={
                'verbose_name_plural': 'Tipos Notificações',
                'verbose_name': 'Tipo Notificação',
            },
        ),
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('usuario_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('sexo',
                 models.CharField(choices=[('Masculino', 'Masculino'), ('Feminino', 'Feminino')], default='Masculino',
                                  max_length=10)),
                ('datanascimento',
                 models.DateField(default=django.utils.timezone.now, verbose_name='Data de nascimento')),
                ('turma', models.CharField(max_length=10)),
            ],
            options={
                'verbose_name_plural': 'Alunos',
                'verbose_name': 'Aluno',
            },
            bases=('notificacao.usuario',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Curso',
            fields=[
                ('remetente_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notificacao.Remetente')),
                ('ativo', models.BooleanField(default=True)),
                ('disciplinas', models.ManyToManyField(to='notificacao.Disciplina')),
            ],
            options={
                'verbose_name_plural': 'Cursos',
                'verbose_name': 'Curso',
            },
            bases=('notificacao.remetente',),
        ),
        migrations.CreateModel(
            name='Instituto',
            fields=[
                ('remetente_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notificacao.Remetente')),
                ('datafundacao', models.DateField(blank=True, null=True, verbose_name='Data de fundação')),
            ],
            options={
                'verbose_name_plural': 'Institutos',
                'verbose_name': 'Instituto',
            },
            bases=('notificacao.remetente',),
        ),
        migrations.CreateModel(
            name='Oferecimento',
            fields=[
                ('remetente_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notificacao.Remetente')),
                ('ano', models.DateField(default=datetime.date.today)),
                ('semestre', models.IntegerField(choices=[(1, 'Primeiro'), (2, 'Segundo')], default=1)),
                ('alunos', models.ManyToManyField(to='notificacao.Aluno')),
                ('id_disciplina', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notificacao.Disciplina')),
            ],
            options={
                'verbose_name_plural': 'Oferecimentos',
                'verbose_name': 'Oferecimento',
            },
            bases=('notificacao.remetente',),
        ),
        migrations.CreateModel(
            name='SalaAlunos',
            fields=[
                ('remetente_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notificacao.Remetente')),
                ('alunos', models.ManyToManyField(to='notificacao.Aluno')),
                ('id_curso', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='notificacao.Curso')),
            ],
            options={
                'verbose_name_plural': 'Salas Alunos',
                'verbose_name': 'Sala Alunos',
            },
            bases=('notificacao.remetente',),
        ),
        migrations.CreateModel(
            name='SalaProfessores',
            fields=[
                ('remetente_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notificacao.Remetente')),
                ('id_curso', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='notificacao.Curso')),
            ],
            options={
                'verbose_name_plural': 'Salas Professores',
                'verbose_name': 'Sala Professores',
            },
            bases=('notificacao.remetente',),
        ),
        migrations.CreateModel(
            name='Servidor',
            fields=[
                ('usuario_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('sexo',
                 models.CharField(choices=[('Masculino', 'Masculino'), ('Feminino', 'Feminino')], default='Masculino',
                                  max_length=10)),
                ('datanascimento',
                 models.DateField(default=django.utils.timezone.now, verbose_name='Data de nascimento')),
                ('funcao', models.CharField(max_length=30, verbose_name='Função')),
            ],
            options={
                'verbose_name_plural': 'Servidores',
                'verbose_name': 'Servidor',
            },
            bases=('notificacao.usuario',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='notificacao',
            name='id_tipo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notificacao.TipoNotificacao',
                                    verbose_name='Tipo notificação'),
        ),
        migrations.AddField(
            model_name='notificacao',
            name='remetente',
            field=models.ManyToManyField(to='notificacao.Remetente'),
        ),
        migrations.AddField(
            model_name='usuario',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='usuario',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('servidor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notificacao.Servidor')),
                ('formacao', models.CharField(max_length=20, verbose_name='Área')),
                ('id_tipo',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notificacao.TipoFormacao',
                                   verbose_name='Tipo formação')),
            ],
            options={
                'verbose_name_plural': 'Professores',
                'verbose_name': 'Professor',
            },
            bases=('notificacao.servidor',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='servidor',
            name='id_instituto',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notificacao.Instituto'),
        ),
        migrations.AddField(
            model_name='notificacao',
            name='username',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notificacao.Servidor'),
        ),
        migrations.AddField(
            model_name='curso',
            name='id_instituto',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notificacao.Instituto'),
        ),
        migrations.AddField(
            model_name='aluno',
            name='id_instituto',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notificacao.Instituto'),
        ),
        migrations.AddField(
            model_name='salaprofessores',
            name='professores',
            field=models.ManyToManyField(to='notificacao.Professor'),
        ),
        migrations.AddField(
            model_name='oferecimento',
            name='id_professor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notificacao.Professor'),
        ),
    ]
